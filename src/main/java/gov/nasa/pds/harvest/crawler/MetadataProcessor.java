package gov.nasa.pds.harvest.crawler;

import java.io.File;

import javax.xml.parsers.DocumentBuilderFactory;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.w3c.dom.Document;

import gov.nasa.pds.harvest.cfg.model.BlobStorage;
import gov.nasa.pds.harvest.cfg.model.Configuration;
import gov.nasa.pds.harvest.cfg.model.ReplaceRule;
import gov.nasa.pds.harvest.meta.AutogenExtractor;
import gov.nasa.pds.harvest.meta.BasicMetadataExtractor;
import gov.nasa.pds.harvest.meta.FileData;
import gov.nasa.pds.harvest.meta.FileDataExtractor;
import gov.nasa.pds.harvest.meta.Metadata;
import gov.nasa.pds.harvest.meta.XPathExtractor;
import gov.nasa.pds.harvest.util.solr.SolrDocWriter;
import gov.nasa.pds.harvest.util.xml.XmlDomUtils;


public class MetadataProcessor
{
    private Logger LOG;
    
    private SolrDocWriter writer;
    
    private BasicMetadataExtractor basicExtractor;
    private FileDataExtractor fileDataExtractor;
    
    private Configuration config;
    private boolean storeBlob;
    
    
    public MetadataProcessor(File outDir, Configuration config) throws Exception
    {
        LOG = LogManager.getLogger(getClass());
        
        writer = new SolrDocWriter(outDir);
        
        basicExtractor = new BasicMetadataExtractor();
        fileDataExtractor = new FileDataExtractor();
        
        this.config = config;
        int blobStorageType = (config.blobStorage == null) ? BlobStorage.NONE : config.blobStorage.storageType;
        this.storeBlob = (blobStorageType == BlobStorage.EMBEDDED);
    }

    
    public void process(File file, Counter counter) throws Exception
    {
        LOG.info("Processing file " + file.toURI().getPath());

        // Parse XML, ignore namespaces. 
        // Basic and XPath extractor are much easier to use without namespaces.
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(false);
        Document doc = XmlDomUtils.readXml(dbf, file);
        
        // Extract basic metadata
        Metadata meta = basicExtractor.extract(doc);
        validate(meta, file); 
        
        // Extract fields by XPath
        XPathExtractor.extract(doc, meta.fields);
        
        // Extract fields autogenerated from data dictionary 
        // Field name format: <ns>.<class>.<ns>.<attribute> (See Registry Manager for more info)
        // Have to parse XML again. Do not ignore namespaces this time. 
        // TODO: Replace with a streaming parser?
        dbf = DocumentBuilderFactory.newInstance();
        dbf.setNamespaceAware(true);
        doc = XmlDomUtils.readXml(dbf, file);        
        AutogenExtractor.extract(doc, meta.fields);
        
        // Set file reference
        setFileRef(meta, file);

        // Extract file data
        FileData fd = fileDataExtractor.extract(file, "application/xml", storeBlob);
        
        writer.write(fd, meta);
        
        counter.prodCounters.inc(meta.rootElement);
    }
    
    
    public void close() throws Exception
    {
        writer.close();
    }
    
    
    private void validate(Metadata meta, File file) throws Exception
    {
        if(meta.lid == null || meta.lid.isEmpty())
        {
            throw new Exception("Missing logical identifier: " + file.toURI().getPath());
        }

        if(meta.vid == null || meta.vid.isEmpty())
        {
            throw new Exception("Missing version id: " + file.toURI().getPath());
        }
    }

    
    private void setFileRef(Metadata meta, File file)
    {
        if(config.fileRef == null) return;
        String filePath = file.toURI().getPath();
        
        if(config.fileRef.rules != null)
        {
            for(ReplaceRule rule: config.fileRef.rules)
            {
                if(rule.prefix == null || rule.replacement == null) continue;
                
                if(filePath.startsWith(rule.prefix))
                {
                    filePath = rule.replacement + filePath.substring(rule.prefix.length());
                    break;
                }
            }
        }
        
        meta.fileRef = filePath;
    }
}
